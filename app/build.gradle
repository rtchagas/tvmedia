plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlinx-serialization'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

android {

    compileSdk 31

    defaultConfig {
        applicationId "com.rafael.tvmedia"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = false
        unitTests.includeAndroidResources = true
    }

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {

    /* Kotlin */
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_json_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"

    /* AndroidX */
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayout_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    /* REST APIs */
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$retrofit_converter_version"

    /* 3rd party */
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "io.coil-kt:coil:$coil_version"

    /* Koin */
    implementation "io.insert-koin:koin-android:$koin_version"

    /* Testing */
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"

    testImplementation "androidx.arch.core:core-testing:$arch_testing_version"
    testImplementation "androidx.navigation:navigation-testing:$nav_version"
    testImplementation "androidx.test.ext:junit-ktx:$junit_ext_version"
    testImplementation "androidx.test:core-ktx:$androidx_test_version"
    testImplementation "androidx.test:rules:$androidx_test_version"
    testImplementation "androidx.test:runner:$androidx_test_version"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version"

    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"

    /**
     * https://developer.android.com/guide/fragments/test
     * Note: debugImplementation is used here so that the empty activity that FragmentScenario
     * relies on is accessible by the test target process.
     */
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"
}
